name: CI/CD Pipeline

on:
  push:
    branches: ["main", "Go-Setup"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  GO_VERSION: "1.23"
  POSTGRES_PASSWORD: postgres
  JWT_KEY: supersecretjwtkey123456789

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run unit tests
        working-directory: ./backend
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic \
            ./internal/models/... \
            ./internal/services/... \
            ./internal/handlers/... \
            ./internal/repository/...

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: sleep_tracker
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run integration tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          JWT_KEY: ${{ env.JWT_KEY }}
        run: go test -v -tags=integration ./...

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Build for Linux
        working-directory: ./backend
        run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o backend-linux cmd/server/main.go

      - name: Build for Windows
        working-directory: ./backend
        run: CGO_ENABLED=0 GOOS=windows go build -a -installsuffix cgo -o backend-windows.exe cmd/server/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            backend/backend-linux
            backend/backend-windows.exe
            backend/backend-darwin

  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t sleep-tracker-backend:${{ github.sha }} .
          docker tag sleep-tracker-backend:${{ github.sha }} sleep-tracker-backend:latest

      - name: Test Docker container
        working-directory: ./backend
        run: |
          # Запускаем контейнер в фоне
          docker run -d --name test-container \
            -p 8080:8080 \
            -e JWT_KEY=${{ env.JWT_KEY }} \
            -e DB_HOST=localhost \
            sleep-tracker-backend:${{ github.sha }}

          # Ждем запуска
          sleep 10

          # Проверяем, что контейнер запустился
          docker ps | grep test-container

          # Останавливаем контейнер
          docker stop test-container
          docker rm test-container
