name: CI/CD Pipeline

on:
  push:
    branches: ["main", "Go-Setup"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  GO_VERSION: "1.23"
  POSTGRES_PASSWORD: postgres
  JWT_KEY: supersecretjwtkey123456789

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ª–∏–Ω—Ç–∏–Ω–≥
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        working-directory: ./backend
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=10m

      - name: Check Go formatting
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

  # Unit —Ç–µ—Å—Ç—ã
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run unit tests
        working-directory: ./backend
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic \
            ./internal/models/... \
            ./internal/services/... \
            ./internal/handlers/... \
            ./internal/repository/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: unittests
          name: codecov-umbrella

  # Integration —Ç–µ—Å—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: sleep_tracker
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run integration tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          JWT_KEY: ${{ env.JWT_KEY }}
        run: go test -v -tags=integration ./...

  # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Build for Linux
        working-directory: ./backend
        run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o backend-linux cmd/server/main.go

      - name: Build for Windows
        working-directory: ./backend
        run: CGO_ENABLED=0 GOOS=windows go build -a -installsuffix cgo -o backend-windows.exe cmd/server/main.go

      - name: Build for macOS
        working-directory: ./backend
        run: CGO_ENABLED=0 GOOS=darwin go build -a -installsuffix cgo -o backend-darwin cmd/server/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            backend/backend-linux
            backend/backend-windows.exe
            backend/backend-darwin

  # –°–±–æ—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t sleep-tracker-backend:${{ github.sha }} .
          docker tag sleep-tracker-backend:${{ github.sha }} sleep-tracker-backend:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "sleep-tracker-backend:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Test Docker container
        working-directory: ./backend
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Ñ–æ–Ω–µ
          docker run -d --name test-container \
            -p 8080:8080 \
            -e JWT_KEY=${{ env.JWT_KEY }} \
            -e DB_HOST=localhost \
            sleep-tracker-backend:${{ github.sha }}

          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
          sleep 10

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          docker ps | grep test-container

          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker stop test-container
          docker rm test-container

  # –î–µ–ø–ª–æ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–µ–ø–ª–æ—è:
      # - SSH –≤ —Å–µ—Ä–≤–µ—Ä
      # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker Compose
      # - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
      # - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Discord
