name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, Dev]
  pull_request:
    branches: [main, develop, Dev]

env:
  GO_VERSION: "1.23"
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sleep-tracker

jobs:
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sleep_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Run golangci-lint
        working-directory: ./backend
        run: $(go env GOPATH)/bin/golangci-lint run --verbose

      - name: Check Go formatting
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

      - name: Run tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          POSTGRES_PASSWORD: postgres
          DB_NAME: sleep_tracker_test
          JWT_KEY: test_jwt_key_123456789
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate test coverage report
        working-directory: ./backend
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage.html

      - name: Check test coverage
        working-directory: ./backend
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Test coverage is below 70%"
            exit 1
          fi

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/Dev'
    environment:
      name: staging
      url: https://staging.sleeptracker.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, etc.

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always()

    steps:
      - name: Delete old packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: "sleep-tracker"
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
